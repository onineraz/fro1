name: CI/CD

on: #언제 동작할지.
  push: # push가 됐을때,
    branches: [ main ] # main브랜치에
    paths-ignore: # 밑에 파일들의 변경사항이 생겨도 무시.
    - '.gitignore'
    - '.dockerignore'

jobs: # 수행할 내용.
  Continuous_Integration:   #job 이름. 내가 정함함
    runs-on: ubuntu-latest  #job을 실행할 환경. 깃허브가 제공
    steps:

    - uses: actions/checkout@v4 # uses=액션들. 이미 만들어진 액션을 검색해서 가져다 쓰면된다. 해당 레포에 접근 권한이 있다면 레포를 가져올것.
      with:
        fetch-depth: 1          #가장 최근 commit한 히스토리만 가져온다.
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    # 도커환경을 쓸꺼야. 도커 명령을 쓸 수 있는 환경 제공공

    # 3. Docker 로그인 (Docker Hub, ECR 등)
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}  # Docker Hub 로그인 사용자명
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Set Variables
      id: set-var
      run: |
        echo "DOCKER_REGISTRY=onineraz" >> $GITHUB_ENV
        echo "DOCKER_REPOSITORY=front" >> $GITHUB_ENV #본인 ecr레포에 맞게 수정
        echo "IMAGE_TAG=${{ github.run_number }}" >> $GITHUB_ENV
        echo "GIT_EMAIL=onineraz@gmail.com" >> $GITHUB_ENV
        echo "GIT_NAME=onineraz" >> $GITHUB_ENV

    - name: Docker Image Build
      id: build-image
      run: | #밑에 있는 명령어를 수행해라.
        docker build -t ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}:${{ env.IMAGE_TAG }} .
    - name: Docker image Push
      id: push-image
      run: |
        docker push ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}:${{ env.IMAGE_TAG }}

    - name: Checkout Deployment Repository
      uses: actions/checkout@v4
      with:
        repository: onineraz/front_deploy #본인에 맞게 수정
        ref: main  # branch
        token: ${{ secrets.GH_TOKEN }}

    - name: k8s manifest update
      run: |
        sed -i "s@ \
        image: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}:.*@ \
        image: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}:${{ env.IMAGE_TAG }}@g" deployment.yml

    - name: Commit and Push
      run: |
        git config user.email ${{ env.GIT_EMAIL }}
        git config user.name ${{ env.GIT_NAME }}
        git add deployment.yml
        git commit -m "Update image tag"
        git push origin main
